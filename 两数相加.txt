给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807



第一想法就是两个链表的对应位置上的节点相加，如果结果超过10，表示会向前
进行进位操作，所以用一个变量来存进位的数，每次相加都需要加上
还需要注意的地方就是当某个链表为空后，在相加的会使他为0，
最后的话就是最后一个节点相加还要进位，那需要再单独新键一个节点（也就是当两个
3位数相加得到一个4位数的情况）
代码如下：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode p=l1;
        ListNode q=l2;
        ListNode at=new ListNode(0);
        ListNode head=at;
        int x,y,car=0,sum=0;
        while(p!=null||q!=null){
            x=p!=null?p.val:0;
            y=q!=null?q.val:0;
            sum=car+x+y;
            car=sum/10;
            at.next=new ListNode(sum%10);
            at=at.next;
            if(p!=null){
                p=p.next;
            }
            if(q!=null){
                q=q.next;
            }
            
        }
        if(car>0){
            at.next=new ListNode(car);
        }
        return head.next;
    }
   
}















